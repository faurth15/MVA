{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import scipy as sc\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.linalg import inv\n",
    "import sklearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f(Q, p, A, b, t, v):\n",
    "    if min([b[i]-A[i].dot(v) for i in range(A.shape[0])]) <= 0:\n",
    "        return +1e10\n",
    "    else:\n",
    "        return t*v.T.dot(Q).dot(v) + t*p.T.dot(v) - sum(np.log(b - A.dot(v)))\n",
    "\n",
    "\n",
    "def grad_f(Q, p, A, b, t, v):\n",
    "    return ( t * ((Q.T + Q).dot(v) + p) + A.T.dot(1 / (b - np.dot(A, v))))\n",
    "\n",
    "\n",
    "def hess_f(Q, p, A, b, t, v):\n",
    "    return(t * (Q.T + Q) + A.T.dot((((1 / (b - np.dot(A, v)))**2)*np.eye(A.shape[0])).dot(A)))\n",
    "\n",
    "\n",
    "def backtracking(Q, p, A, b, t, v, delta_x, incr, alpha = 0.01, beta= 0.7):\n",
    "    step = 1\n",
    "    while not(((b-A.dot( v + step * delta_x))>0).all()) or (f(Q, p, A, b, t, v + step * delta_x) > f(Q, p, A, b, t, v) + alpha * step * (-incr)):\n",
    "        step = beta * step\n",
    "        \n",
    "    return step"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def centering_step(Q, p, A, b, t, v0, eps = 0.001):\n",
    "    \n",
    "    \n",
    "    v_list = []\n",
    "    v_list.append(v0)\n",
    "    n_iter_max = 100\n",
    "    n = 0\n",
    "    \n",
    "    for i in range(n_iter_max):\n",
    "       \n",
    "        grad = grad_f(Q, p, A, b, t, v0)\n",
    "        hess = hess_f(Q, p, A, b, t, v0)\n",
    " \n",
    "        \n",
    "        delta_x = -np.dot(np.linalg.inv(hess) , grad)\n",
    "        incr = grad.T.dot(-delta_x)\n",
    "        \n",
    "        \n",
    "        if 0.5 * incr < eps:\n",
    "            return(v_list[-1] , n, v_list)\n",
    "       \n",
    "        else :\n",
    "            \n",
    "            n = n+1\n",
    "            step = backtracking(Q, p, A, b, t, v0, delta_x, incr, alpha = 0.01, beta= 0.7)\n",
    "            v0 = v0 + step * delta_x\n",
    "            v_list.append(v0)\n",
    "            \n",
    "    \n",
    "    return(v_list[-1] , n, v_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def barr_method(Q, p, A, b, v0, mu, eps=0.001):\n",
    "    \n",
    "    \n",
    "    n_iter_max = 100\n",
    "    \n",
    "    m = A.shape[0]                \n",
    "    t = 1                         \n",
    "    \n",
    "    seq = []\n",
    "    seq.append(v0)\n",
    "    n_eps = []\n",
    "    n_eps.append(0)\n",
    "    \n",
    "    for i in range(n_iter_max):\n",
    "        \n",
    "        v0 , n , v_list = centering_step(Q, p, A, b, t, v0, eps)\n",
    "\n",
    "        \n",
    "        seq.append(v0)\n",
    "        n_eps.append(n_eps[-1] + n)\n",
    "\n",
    "    \n",
    "        if m/t < eps :\n",
    "            return(seq, n_eps)\n",
    "        \n",
    "        else :\n",
    "            t = mu * t\n",
    "            \n",
    "    return (seq, n_eps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "n = 10\n",
    "d = 50\n",
    "\n",
    "X = np.random.randn(n,d)\n",
    "A = np.vstack((X.T, -X.T))\n",
    "w0 = np.random.random_sample(size = d)\n",
    "y = X.dot(w0) + np.random.rand(n)\n",
    "p = y\n",
    "Q = 0.5 * np.eye(n)\n",
    "b = 10 * np.ones(2 * d)\n",
    "v0 = np.zeros(n)\n",
    "\n",
    "eps = 0.001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n",
      "The PostScript backend does not support transparency; partially transparent artists will be rendered opaque.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,8)) \n",
    "plt.suptitle('Methode de la barrière', size = 20)\n",
    "\n",
    "for mu in [2,15,50,100,250]:\n",
    "    v_barr, n_eps = barr_method(Q,p,A,b,v0, mu ,0.0001)\n",
    "    v_opti = v_barr[-1]\n",
    "    values = [(x.T.dot(Q.dot(x)) + p.T.dot(x)) - (v_opti.T.dot(Q.dot(v_opti)) + p.T.dot(v_opti)) for x in v_barr]\n",
    "    plt.step(n_eps, values, label='mu='+str(mu))\n",
    "    \n",
    "plt.legend(loc = 'upper right')\n",
    "plt.semilogy()\n",
    "plt.xlabel(\"Nombre d'itérations de Newton\", size = 15)\n",
    "plt.ylabel('$Log (f(v_t)-f^*)$', size = 15)\n",
    "plt.savefig(\"plot.eps\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
